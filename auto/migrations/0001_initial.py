# Generated by Django 4.1.5 on 2023-02-18 13:01

import auto.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('phone', models.CharField(default='+914000000', max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('rank', models.CharField(choices=[('MAN', 'MANAGER'), ('SUP', 'SUPERWISER'), ('STF', 'STAFF')], default=('STF', 'STAFF'), max_length=115)),
                ('has_message', models.PositiveIntegerField(default=0)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('image', models.CharField(max_length=512)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('SN', 'SEEN'), ('US', 'UNSEEN')], max_length=115)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Departman',
            fields=[
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('priority', models.CharField(choices=[('H', 'HIGH'), ('M', 'MIDIUM'), ('L', 'LOW')], default=('M', 'MIDIUM'), max_length=115)),
                ('status', models.CharField(choices=[('c', 'close'), ('o', 'open')], default=('o', 'o'), max_length=25)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('departman', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auto.departman')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='letter_receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='letter_sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=115)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('departman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auto.departman')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FileHistory',
            fields=[
                ('id', models.CharField(default=auto.models.get_random_id, editable=False, max_length=15, primary_key=True, serialize=False, unique=True)),
                ('file', models.CharField(max_length=512)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('history', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='history_file', to='auto.history')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.CharField(max_length=512)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('comment', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_file', to='auto.comment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='letter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='auto.letter'),
        ),
        migrations.AddField(
            model_name='comment',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reciever', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='departman',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departman_detail', to='auto.departman'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
